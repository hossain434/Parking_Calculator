package parking_calculator;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.How;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class PageObjects {
	private WebDriverWait wait;

	@FindBy(how = How.NAME, using = "Lot")
	private WebElement chooseLot;

	@FindBy(how = How.ID, using = "EntryDate")
	private WebElement entryDate;

	@FindBy(how = How.ID, using = "EntryTime")
	private WebElement entryTime;

	@FindBy(how = How.ID, using = "ExitDate")
	private WebElement leavingDate;

	@FindBy(how = How.ID, using = "ExitTime")
	private WebElement leavingTime;

	@FindBy(how = How.CSS, using = "EntryTimeAMPM:nth-child(2)")
	private WebElement entryTimeAM;

	@FindBy(how = How.CSS, using = "EntryTimeAMPM:nth-child(3)")
	private WebElement entryTimePM;

	@FindBy(how = How.CSS, using = "ExitTimeAMPM:nth-child(2)")
	private WebElement exitTimeAM;

	@FindBy(how = How.CSS, using = "ExitTimeAMPM:nth-child(2)")
	private WebElement exitTimePM;

	@FindBy(how = How.CSS, using = "input[name=\"Submit\"]")
	private WebElement calculate;

	@FindBy(how = How.CSS, using = "b")
	private WebElement getTxt;

	// Create new WebDriver wait
	public PageObjects(final WebDriver driver) {
		PageFactory.initElements(driver, this);
		this.wait = new WebDriverWait(driver, 30);
	}

	// Choose Lot type from dropdown
	public void ChooseLot() throws InterruptedException {
		Select chooseLotLongTerm = new Select(chooseLot);
		chooseLotLongTerm.selectByVisibleText("Long-Term Surface Parking");
	}

// Choose Entry Time
	public void EntryTime(String time) throws InterruptedException {
		this.entryTime.clear();
		this.entryTime.sendKeys(time);
	}

	// Choose Entry Time
	public void EntryDate(String date) throws InterruptedException {
		this.entryDate.clear();
		this.entryDate.sendKeys(date);
	}

	// Choose Exit Time
	public void ExitTime(String time) throws InterruptedException {
		this.leavingTime.clear();
		this.leavingTime.sendKeys(time);
	}

	// Choose Exit Date
	public void ExitDate(String date) throws InterruptedException {
		this.leavingDate.clear();
		this.leavingDate.sendKeys(date);
	}

	// Click on Calculate button
	public void Calculate() throws InterruptedException {
		wait.until(ExpectedConditions.elementToBeClickable(this.calculate));
		this.calculate.click();
	}

	// Get actual cost from the screen
	public String GetText() throws InterruptedException {
		wait.until(ExpectedConditions.elementToBeClickable(this.getTxt));
		return this.getTxt.getText();

	}
}
